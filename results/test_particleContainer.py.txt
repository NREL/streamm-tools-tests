
 Cleaning memory for initial objects 

x = atoms1[1] is returns x as an effective 'reference' 

x =  {'position': [0.2, 1.3, 33.0], 'charge': 2.0, 'type': 'Si', 'mass': 1.23, 'tagsDict': {'residue': 1, 'lmptype': 0, 'chain': 1, 'linkid': '??', 'symbol': '??', 'gtype': 'Si', 'number': 0, 'vdw_radii': 0.0, 'cov_radii': 0.0, 'resname': 'RES', 'cplytag': '', 'mass': 1.23, 'qgroup': 0, 'ffmass': 1.23, 'type': 'Si', 'fftype': '??', 'ring': 0}} 

after changing with x.position = [1.0, 1.0, 1.0]
x =  {'position': [1.0, 1.0, 1.0], 'charge': 2.0, 'type': 'Si', 'mass': 1.23, 'tagsDict': {'residue': 1, 'lmptype': 0, 'chain': 1, 'linkid': '??', 'symbol': '??', 'gtype': 'Si', 'number': 0, 'vdw_radii': 0.0, 'cov_radii': 0.0, 'resname': 'RES', 'cplytag': '', 'mass': 1.23, 'qgroup': 0, 'ffmass': 1.23, 'type': 'Si', 'fftype': '??', 'ring': 0}} 

atoms1 has been changed

 Contains particle objects: 
 1 :  Si 1.000000 1.000000 1.000000 2.000000 1.230000    
 2 :  C 5.000000 2.300000 -22.100000 1.000000 2.340000    

before, atoms1-->  
 Contains particle objects: 
 1 :  Si 1.000000 1.000000 1.000000 2.000000 1.230000    
 2 :  C 5.000000 2.300000 -22.100000 1.000000 2.340000    
 

after 'del atoms1[2]' atoms1 -->  
 Contains particle objects: 
 1 :  Si 1.000000 1.000000 1.000000 2.000000 1.230000    
 

Testing 'in' operator (1 in atoms1)
atoms1 contains gid 1
Testing 'in' operator (5 in atoms1)
key not found in atoms1
 
Will print the new atoms1 after adding atoms1 += atoms2

 Contains particle objects: 
 1 :  Si 1.000000 1.000000 1.000000 2.000000 1.230000    
 3 :  C 5.000000 2.300000 -20.100000 1.000000 2.340000    
 4 :  C 0.000000 2.300000 -20.100000 1.000000 2.340000    

